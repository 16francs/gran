// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/uploader/context.go

// Package mock_uploader is a generated GoMock package.
package mock_uploader

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileUploader is a mock of FileUploader interface
type MockFileUploader struct {
	ctrl     *gomock.Controller
	recorder *MockFileUploaderMockRecorder
}

// MockFileUploaderMockRecorder is the mock recorder for MockFileUploader
type MockFileUploaderMockRecorder struct {
	mock *MockFileUploader
}

// NewMockFileUploader creates a new mock instance
func NewMockFileUploader(ctrl *gomock.Controller) *MockFileUploader {
	mock := &MockFileUploader{ctrl: ctrl}
	mock.recorder = &MockFileUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileUploader) EXPECT() *MockFileUploaderMockRecorder {
	return m.recorder
}

// UploadUserThumbnail mocks base method
func (m *MockFileUploader) UploadUserThumbnail(ctx context.Context, data []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserThumbnail", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserThumbnail indicates an expected call of UploadUserThumbnail
func (mr *MockFileUploaderMockRecorder) UploadUserThumbnail(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserThumbnail", reflect.TypeOf((*MockFileUploader)(nil).UploadUserThumbnail), ctx, data)
}
