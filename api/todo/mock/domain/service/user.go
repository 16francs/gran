// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/user.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	domain "github.com/calmato/gran/api/todo/internal/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Authentication mocks base method
func (m *MockUserService) Authentication(ctx context.Context) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", ctx)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authentication indicates an expected call of Authentication
func (mr *MockUserServiceMockRecorder) Authentication(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockUserService)(nil).Authentication), ctx)
}

// IsContainInGroupIDs mocks base method
func (m *MockUserService) IsContainInGroupIDs(ctx context.Context, groupID string, u *domain.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContainInGroupIDs", ctx, groupID, u)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContainInGroupIDs indicates an expected call of IsContainInGroupIDs
func (mr *MockUserServiceMockRecorder) IsContainInGroupIDs(ctx, groupID, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContainInGroupIDs", reflect.TypeOf((*MockUserService)(nil).IsContainInGroupIDs), ctx, groupID, u)
}
